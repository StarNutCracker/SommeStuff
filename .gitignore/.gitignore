import numpy as np
import random


class Machine(object):
    
    angles = np.array([random.random()*2*np.pi for i in range(18)])
    v0 = 0

    def __init__(self,data):
        self.d = []
        for i in data:
            self.d.append(Machine.Psi_fin(Machine.Psi(i[0],i[1],i[2],i[3]),Machine.angles))
        self.d = np.asarray(self.d)

    @staticmethod
    def Psi(x0,x1,x2,x3):
        a1 = np.array([np.cos(np.pi/2*x0),np.sin(np.pi/2*x0)])
        a2 = np.array([np.cos(np.pi/2*x1),np.sin(np.pi/2*x1)])
        a3 = np.array([np.cos(np.pi/2*x2),np.sin(np.pi/2*x2)])
        a4 = np.array([np.cos(np.pi/2*x3),np.sin(np.pi/2*x3)])
        return np.kron(a1,np.kron(a2,np.kron(a3,a4)))
        
    @staticmethod    
    def R(p):
        return np.array([[np.cos(p/2),-np.sin(p/2)],[np.sin(p/2),np.cos(p/2)]])
    @staticmethod
    def Ry(p,parity):
        if parity == 2:
            return np.kron(np.identity(2),Machine.R(p))
        if parity == 1:
            return np.kron(Machine.R(p),np.identity(2))
    @staticmethod
    def A(p1,p2):
        C = np.array([[1,0,0,0],[0,1,0,0],[0,0,0,1],[0,0,1,0]])
        return C@Machine.Ry(p1,1)@Machine.Ry(p2,2)@C
    @staticmethod
    def U(p1,p2,p3,p4,p5,p6):
        return Machine.Ry(p1,1)@Machine.Ry(p2,2)@Machine.A(p3,p4)@Machine.Ry(p5,1)@Machine.Ry(p6,2)
    @staticmethod
    def G1(p1,p2,p3,p4,p5,p6):
        return np.kron(Machine.U(p1,p2,p3,p4,p5,p6),np.identity(4))
    @staticmethod
    def G2(p1,p2,p3,p4,p5,p6):
        return np.kron(np.kron(np.identity(2),Machine.U(p1,p2,p3,p4,p5,p6)),np.identity(2))
    @staticmethod
    def G3(p1,p2,p3,p4,p5,p6):
        return np.kron(np.identity(4),Machine.U(p1,p2,p3,p4,p5,p6))
    @staticmethod
    def Psi_fin(psi,p):
        Psi1 = Machine.G1(p[0],p[1],p[2],p[3],p[4],p[5])@psi
        Psi2 = Machine.G2(p[6],p[7],p[8],p[9],p[10],p[11])@Psi1
        return Machine.G3(p[12],p[13],p[14],p[15],p[16],p[17])@Psi2

    def get_Probability(self):
        #Gives out the probability to measure a 1 in the last Qbit
        probability = []
        z = np.array([0,1])
        o = np.array([1,0])
        b1 = np.kron(z,np.kron(z,np.kron(z,o)))
        b2 = np.kron(z,np.kron(z,np.kron(o,o)))
        b3 = np.kron(z,np.kron(o,np.kron(z,o)))
        b4 = np.kron(z,np.kron(o,np.kron(o,o)))
        b5 = np.kron(o,np.kron(z,np.kron(z,o)))
        b6 = np.kron(o,np.kron(z,np.kron(o,o)))
        b7 = np.kron(o,np.kron(o,np.kron(z,o)))
        b8 = np.kron(o,np.kron(o,np.kron(o,o)))
        basis = np.array([b1,b2,b3,b4,b5,b6,b7,b8])
        for i in self.d:
            p=0
            for k in basis:
                p+=np.dot(i,k)**2
            probability.append(p)
        return np.asarray(probability)
